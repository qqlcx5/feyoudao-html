(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{199:function(e,s,a){e.exports=a.p+"assets/img/2.1a033437.png"},200:function(e,s,a){e.exports=a.p+"assets/img/1.4f572942.png"},281:function(e,s,a){"use strict";a.r(s);var t=a(0),n=Object(t.a)({},function(){var e=this,s=e.$createElement,t=e._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"node基本概念"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#node基本概念","aria-hidden":"true"}},[e._v("#")]),e._v(" Node基本概念")]),e._v(" "),t("h2",{attrs:{id:"一-node是什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一-node是什么","aria-hidden":"true"}},[e._v("#")]),e._v(" 一.Node是什么?")]),e._v(" "),t("p",[e._v("Node.js是一个基于 Chrome V8 引擎的JavaScript运行环境(runtime),Node不是一门语言是让js运行在后端的运行时,并且不包括javascript全集,因为在服务端中不包含DOM和BOM,Node也提供了一些新的模块例如http,fs模块等。Node.js 使用了事件驱动、非阻塞式 I/O 的模型，使其轻量又高效并且Node.js 的包管理器 npm，是全球最大的开源库生态系统。事件驱动与非阻塞IO后面我们会一一介绍。到此我们已经对node有了简单的概念。")]),e._v(" "),t("h2",{attrs:{id:"二-node解决了哪些问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#二-node解决了哪些问题","aria-hidden":"true"}},[e._v("#")]),e._v(" 二.Node解决了哪些问题?")]),e._v(" "),t("p",[e._v("Node在处理高并发,I/O密集场景有明显的性能优势")]),e._v(" "),t("ul",[t("li",[e._v("高并发,是指在同一时间并发访问服务器")]),e._v(" "),t("li",[e._v("I/O密集指的是文件操作、网络操作、数据库,相对的有CPU密集,CPU密集指的是逻辑处理运算、压缩、解压、加密、解密")])]),e._v(" "),t("blockquote",[t("p",[e._v("Web主要场景就是接收客户端的请求读取静态资源和渲染界面,所以Node非常适合Web应用的开发。")])]),e._v(" "),t("h2",{attrs:{id:"三-js单线程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#三-js单线程","aria-hidden":"true"}},[e._v("#")]),e._v(" 三.JS单线程")]),e._v(" "),t("p",[e._v("javascript在最初设计时设计成了单线程,为什么不是多线程呢？如果多个线程同时操作DOM那岂不会很混乱？这里所谓的单线程指的是主线程是单线程的,所以在Node中主线程依旧是单线程的。")]),e._v(" "),t("ul",[t("li",[e._v("单线程特点是节约了内存,并且不需要在切换执行上下文")]),e._v(" "),t("li",[e._v("而且单线程不需要管锁的问题.")])]),e._v(" "),t("h2",{attrs:{id:"四-同步异步和阻塞非阻塞"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#四-同步异步和阻塞非阻塞","aria-hidden":"true"}},[e._v("#")]),e._v(" 四.同步异步和阻塞非阻塞")]),e._v(" "),t("ul",[t("li",[e._v("同步就是在执行某段代码时，代码没有得到返回之前，其他代码无法执行，当得到了返回值后可以继续执行其他代码。")]),e._v(" "),t("li",[e._v("异步就是在执行某段代码时，代码不会立即得到返回结果，可以继续执行其他代码，返回值通过回调来获取")])]),e._v(" "),t("p",[t("img",{attrs:{src:a(199),alt:""}})]),e._v(" "),t("h2",{attrs:{id:"五-node中的event-loop"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#五-node中的event-loop","aria-hidden":"true"}},[e._v("#")]),e._v(" 五.Node中的Event Loop")]),e._v(" "),t("p",[t("img",{attrs:{src:a(200),alt:""}})]),e._v(" "),t("ul",[t("li",[e._v("1.我们写的js代码会交给v8引擎进行处理")]),e._v(" "),t("li",[e._v("2.代码中可能会调用nodeApi,node会交给libuv库处理")]),e._v(" "),t("li",[e._v("3.libuv通过阻塞i/o和多线程实现了异步io")]),e._v(" "),t("li",[e._v("4.通过事件驱动的方式,将结果放到事件队列中,最终交给我们的应用。")])]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("    本阶段执行已经被 setTimeout() 和 setInterval() 的调度回调函数。\n   ┌───────────────────────────┐\n┌─>│           timers          │ \n│  └─────────────┬─────────────┘\n|   执行延迟到下一个循环迭代的 I/O 回调。\n│  ┌─────────────┴─────────────┐\n│  │     pending callbacks     │\n│  └─────────────┬─────────────┘\n|   仅系统内部使用。\n│  ┌─────────────┴─────────────┐\n│  │       idle, prepare       │\n│  └─────────────┬─────────────┘      \n|  检索新的I/O事件;执行与 I/O相关的回调  ┌───────────────┐\n│  ┌─────────────┴─────────────┐      │   incoming:   │\n│  │           poll            │<─────┤  connections, │\n│  └─────────────┬─────────────┘      │   data, etc.  │\n│  setImmediate() 回调函数在这里执行。  └───────────────┘\n│  ┌─────────────┴─────────────┐      \n│  │           check           │\n│  └─────────────┬─────────────┘\n|  一些关闭的回调函数\n│  ┌─────────────┴─────────────┐\n└──┤      close callbacks      │  \n   └───────────────────────────┘\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br"),t("span",{staticClass:"line-number"},[e._v("11")]),t("br"),t("span",{staticClass:"line-number"},[e._v("12")]),t("br"),t("span",{staticClass:"line-number"},[e._v("13")]),t("br"),t("span",{staticClass:"line-number"},[e._v("14")]),t("br"),t("span",{staticClass:"line-number"},[e._v("15")]),t("br"),t("span",{staticClass:"line-number"},[e._v("16")]),t("br"),t("span",{staticClass:"line-number"},[e._v("17")]),t("br"),t("span",{staticClass:"line-number"},[e._v("18")]),t("br"),t("span",{staticClass:"line-number"},[e._v("19")]),t("br"),t("span",{staticClass:"line-number"},[e._v("20")]),t("br"),t("span",{staticClass:"line-number"},[e._v("21")]),t("br"),t("span",{staticClass:"line-number"},[e._v("22")]),t("br"),t("span",{staticClass:"line-number"},[e._v("23")]),t("br"),t("span",{staticClass:"line-number"},[e._v("24")]),t("br")])]),t("blockquote",[t("p",[e._v("这里每一个阶段都对应一个事件队列,当event loop执行到某个阶段时会将当前阶段对应的队列依次执行。当该队列已用尽或达到回调限制，事件循环将移动到下一阶段。")])]),e._v(" "),t("blockquote",[t("p",[t("code",[e._v("process.nextTick()")]),e._v(" 从技术上讲不是事件循环的一部分。优先级高于微任务")])]),e._v(" "),t("p",[t("strong",[e._v("poll阶段:")])]),e._v(" "),t("p",[e._v("1.检测Poll队列中是否为空，如果不为空则执行队列中的任务，直到超时或者全部执行完毕。")]),e._v(" "),t("p",[e._v("2.执行完毕后检测setImmediate队列是否为空，如果不为空则执行check阶段，如果为空则等待时间到达。时间到达后回到timer阶段")]),e._v(" "),t("p",[e._v("3.等待时间到达是可能会出现新的callback，此时也在当前阶段被清空")]),e._v(" "),t("h2",{attrs:{id:"六-node中全局对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#六-node中全局对象","aria-hidden":"true"}},[e._v("#")]),e._v(" 六.Node中全局对象")]),e._v(" "),t("ul",[t("li",[e._v("Buffer")]),e._v(" "),t("li",[e._v("process")]),e._v(" "),t("li",[e._v("setInterval,setTimeout,setImmediate")]),e._v(" "),t("li",[e._v("console")]),e._v(" "),t("li",[e._v("queueMicrotask")])]),e._v(" "),t("h2",{attrs:{id:"七-node中的模块"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#七-node中的模块","aria-hidden":"true"}},[e._v("#")]),e._v(" 七.node中的模块")]),e._v(" "),t("ul",[t("li",[e._v("__dirname")]),e._v(" "),t("li",[e._v("__filename")]),e._v(" "),t("li",[e._v("exports")]),e._v(" "),t("li",[e._v("module")]),e._v(" "),t("li",[e._v("require()")])])])},[],!1,null,null,null);s.default=n.exports}}]);